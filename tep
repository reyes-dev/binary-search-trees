
[1mFrom:[0m /home/reyes/repos/binary-search-trees/script.rb:100 Tree#delete:

     [1;34m99[0m: [32mdef[0m [1;34mdelete[0m(root, data)
 => [1;34m100[0m:   [32mreturn[0m root [32mif[0m root.nil?
    [1;34m101[0m: 
    [1;34m102[0m:   [1;34m# if the value is smaller than root then it's to the left[0m
    [1;34m103[0m:   [32mif[0m data < root.data
    [1;34m104[0m:     root.left_child = delete(root.left_child, data)
    [1;34m105[0m:   [1;34m# if the value is greater than root then it's to the right[0m
    [1;34m106[0m:   [32melsif[0m data > root.data
    [1;34m107[0m:     root.right_child = delete(root.right_child, data)
    [1;34m108[0m:   [1;34m# if the value is equal to the root then it is to be deleted[0m
    [1;34m109[0m:   [32melsif[0m data == root.data
    [1;34m110[0m:     [1;34m# node with 1 or 0 children[0m
    [1;34m111[0m:     [32mif[0m root.left_child.nil?
    [1;34m112[0m:       root = [1;36mnil[0m
    [1;34m113[0m:     [32melsif[0m root.right_child.nil?
    [1;34m114[0m:       root = [1;36mnil[0m
    [1;34m115[0m:     [1;34m# node with 2 children I.E. neither are nil[0m
    [1;34m116[0m:     [32melse[0m
    [1;34m117[0m:       [1;34m# get the smallest node in the right tree[0m
    [1;34m118[0m:       [1;34m# using min_value_node to iterate through each smaller left value[0m
    [1;34m119[0m:       [1;34m# until it hits nil[0m
    [1;34m120[0m:       root = min_value_node(root.right_child)
    [1;34m121[0m:       [1;34m# p root[0m
    [1;34m122[0m: 
    [1;34m123[0m:       root.right_child = delete(root.right_child, root.data)
    [1;34m124[0m:     [32mend[0m
    [1;34m125[0m:   [32mend[0m
    [1;34m126[0m: [32mend[0m

